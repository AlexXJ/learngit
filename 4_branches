creat a new branch named 'dev'
$ git checkout -b dev
	=       $git branch dev
		$git checkout dev

check the branches
$git branch


change the branch back to master
$git checkout master


merge 'dev' to 'master'
$git merge dev

delete branch 'dev'
$git branch -d dev

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
alex@factory:~/gitskills$ git checkout -b dev
fatal: A branch named 'dev' already exists.
alex@factory:~/gitskills$ git branch
* dev
  master
alex@factory:~/gitskills$ git add 4_branches 
alex@factory:~/gitskills$ git commit -m "learn to make a branch callde dev"
[dev 13028c2] learn to make a branch callde dev
 1 file changed, 18 insertions(+)
 create mode 100644 4_branches
alex@factory:~/gitskills$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
alex@factory:~/gitskills$ git merge dev
Updating bb55fc7..13028c2
Fast-forward
 4_branches | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)
 create mode 100644 4_branches
alex@factory:~/gitskills$ git branch -d dev
Deleted branch dev (was 13028c2).
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
when there is conflict between branches

Creating branches is quick and simple

#This is git pointed for me! It's f**king great!
<<<<<<< HEAD
Creating branches is quick & simple
=======
Creating branches is quick AND simple
>>>>>>> feature1

This is MY command line
alex@factory:~/gitskills$ git checkout -b feature1
Switched to a new branch 'feature1'
alex@factory:~/gitskills$ vi 4_branches 
alex@factory:~/gitskills$ git add 4_branches 
alex@factory:~/gitskills$ git commit -m "AND"
[feature1 312de98] AND
 1 file changed, 1 insertion(+), 1 deletion(-)
alex@factory:~/gitskills$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
alex@factory:~/gitskills$ vi 4_branches 
alex@factory:~/gitskills$ git add 4_branches 
alex@factory:~/gitskills$ git commit -m "&"
[master 2e09dc7] &
 1 file changed, 1 insertion(+), 1 deletion(-)
alex@factory:~/gitskills$ git merge feature1
Auto-merging 4_branches
CONFLICT (content): Merge conflict in 4_branches
Automatic merge failed; fix conflicts and then commit the result.
alex@factory:~/gitskills$ vi 4_branches 
alex@factory:~/gitskills$ git add 4_branches
alex@factory:~/gitskills$ git commit -m "comflict"
[master 7079e51] comflict
alex@factory:~/gitskills$ git log --graph --pretty=oneline --abbrev-commit
*   7079e51 comflict
|\  
| * 312de98 AND
* | 2e09dc7 &
|/  
* 909b427 propare for Conflict
* 13028c2 learn to make a branch callde dev
* bb55fc7 Initial commit

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
merge 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



When you find a bug and need to deal with it but you still need to working on the present branches
1, 'git stash'
2, make a new issue branch and fix the bug
3, 'git stash apply' (can add the version'stash@{0}' to apply the specific one) use 'git stash list' to check the stashes
4, 'git stash drop' or 'git stash pop' to delete the stash
5, continue your work
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
alex@factory:~/learngit$ git add 4_branches 
alex@factory:~/learngit$ git status
On branch dev
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   4_branches

alex@factory:~/learngit$ git branch
* dev
  master
alex@factory:~/learngit$ git stash
Saved working directory and index state WIP on dev: 2d331d8 creat a repository in github.com, and make a link from local computer
HEAD is now at 2d331d8 creat a repository in github.com, and make a link from local computer
alex@factory:~/learngit$ git status
On branch dev
nothing to commit, working directory clean
alex@factory:~/learngit$ git checkout mastar
error: pathspec 'mastar' did not match any file(s) known to git.
alex@factory:~/learngit$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
alex@factory:~/learngit$ vi issue101
alex@factory:~/learngit$ git add issue101 
alex@factory:~/learngit$ git commit -m "fix issue 101"
[issue101 25ee29f] fix issue 101
 1 file changed, 1 insertion(+)
 create mode 100644 issue101
alex@factory:~/learngit$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 3 commits.
  (use "git push" to publish your local commits)
alex@factory:~/learngit$ git status
On branch master
Your branch is ahead of 'origin/master' by 3 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean
alex@factory:~/learngit$ git merge issue101 
Updating 49081e7..25ee29f
Fast-forward
 issue101 | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 issue101
alex@factory:~/learngit$ git branch -d issue101 
Deleted branch issue101 (was 25ee29f).
alex@factory:~/learngit$ git checkout dev
Switched to branch 'dev'
alex@factory:~/learngit$ git status
On branch dev
nothing to commit, working directory clean
alex@factory:~/learngit$ git stash list
stash@{0}: WIP on dev: 2d331d8 creat a repository in github.com, and make a link from local computer
alex@factory:~/learngit$ git stash apply
On branch dev
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   4_branches

alex@factory:~/learngit$ git commit -m "move 4_branches from repository gitskills to learngit"
[dev 8c3c33f] move 4_branches from repository gitskills to learngit
 1 file changed, 96 insertions(+)
 create mode 100644 4_branches
alex@factory:~/learngit$ git status
On branch dev
nothing to commit, working directory clean
alex@factory:~/learngit$ git push origin master
Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (10/10), done.
Writing objects: 100% (10/10), 1.48 KiB | 0 bytes/s, done.
Total 10 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), done.
To git@github.com:AlexXJ/learngit.git
   af87a00..25ee29f  master -> master
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



When you want to delete a new feature branch witch has already 'add' and 'commit' but not 'push' yet
Use 'git branch -D feature-whatever' to delete the branch permenately
Always remmamber to develop a new feature in a new branch, for the safety of the whole project and some unsurtain factors
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
alex@factory:~/learngit$ git branch
* dev
  master
alex@factory:~/learngit$ git checkout -b feature-vulcan
Switched to a new branch 'feature-vulcan'
alex@factory:~/learngit$ git add vulcan.py 
alex@factory:~/learngit$ git commit -m "add feature vulcan"
[feature-vulcan db05c1e] add feature vulcan
 1 file changed, 1 insertion(+)
 create mode 100644 vulcan.py
alex@factory:~/learngit$ git branch
  dev
* feature-vulcan
  master
alex@factory:~/learngit$ git checkout dev
Switched to branch 'dev'
alex@factory:~/learngit$ git branch -d feature-vulcan 
error: The branch 'feature-vulcan' is not fully merged.
If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
alex@factory:~/learngit$ git branch -D feature-vulcan
Deleted branch feature-vulcan (was db05c1e).
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
